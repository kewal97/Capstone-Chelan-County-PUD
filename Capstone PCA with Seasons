{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c043db28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import required libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, KFold\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from statsmodels.tsa.stattools import adfuller\n",
    "from statsmodels.tsa.seasonal import seasonal_decompose"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0999f63b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2629440, 10)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Install pyreadr library\n",
    "#!pip install pyreadr\n",
    "\n",
    "# Read the data from .RDS files\n",
    "import pyreadr\n",
    "data =  pyreadr.read_r('2019_1min_df.RDS')\n",
    "df_2019 = data[None]\n",
    "data = pyreadr.read_r('2020_1min_df.RDS')\n",
    "df_2020 = data[None]\n",
    "data = pyreadr.read_r('2021_1min_df.RDS')\n",
    "df_2021 = data[None]\n",
    "data = pyreadr.read_r('2022_1min_df.RDS')\n",
    "df_2022 = data[None]\n",
    "data = pyreadr.read_r('2023_1min_df.RDS')\n",
    "df_2023 = data[None]\n",
    "\n",
    "# Merge all the dataframes to form one dataframe.\n",
    "df = pd.concat([df_2019, df_2020, df_2021, df_2022, df_2023], ignore_index=True)\n",
    "\n",
    "df['datetime_utc'] = pd.to_datetime(df['datetime_utc'])\n",
    "\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98d2f010",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fill Null Values using foward fill and backward fill\n",
    "df.fillna(method='ffill', inplace=True)\n",
    "df.fillna(method='bfill', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82c319d3",
   "metadata": {},
   "source": [
    "# 1. Modeling using Principal Component Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e1a3f00",
   "metadata": {},
   "source": [
    "## 1. Rocky Reach"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e01dcf46",
   "metadata": {},
   "source": [
    "### Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6ecd3577",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge',\n",
       "       'Chelan_Flow', 'Entiat_Flow', 'Rocky_Reach_Total_Discharge',\n",
       "       'Wenatchee_Flow', 'Rock_Island_Total_Discharge',\n",
       "       'Rock_Island_Headwater_Elevation', 'Rocky_Reach_Headwater_Elevation',\n",
       "       'Rocky_Reach_Headwater_Elevation_lag_1',\n",
       "       'Rocky_Reach_Headwater_Elevation_lag_2',\n",
       "       'Rocky_Reach_Total_Discharge_lag_1',\n",
       "       'Rocky_Reach_Total_Discharge_lag_2', 'Wells_Total_Discharge_lag_90',\n",
       "       'Wells_Total_Discharge_lag_91', 'Wells_Total_Discharge_lag_92',\n",
       "       'Wells_Total_Discharge_lag_93', 'Wells_Total_Discharge_lag_94',\n",
       "       'Wells_Total_Discharge_lag_95', 'Wells_Total_Discharge_lag_96',\n",
       "       'Wells_Total_Discharge_lag_97', 'Wells_Total_Discharge_lag_98',\n",
       "       'Wells_Total_Discharge_lag_99', 'Wells_Total_Discharge_lag_100',\n",
       "       'Wells_Total_Discharge_lag_101', 'Wells_Total_Discharge_lag_102',\n",
       "       'Wells_Total_Discharge_lag_103', 'Wells_Total_Discharge_lag_104',\n",
       "       'Wells_Total_Discharge_lag_105', 'Chelan_Flow_lag_62',\n",
       "       'Chelan_Flow_lag_63', 'Chelan_Flow_lag_64', 'Chelan_Flow_lag_65',\n",
       "       'Chelan_Flow_lag_66', 'Chelan_Flow_lag_67', 'Chelan_Flow_lag_68',\n",
       "       'Chelan_Flow_lag_69', 'Chelan_Flow_lag_70', 'Chelan_Flow_lag_71',\n",
       "       'Chelan_Flow_lag_72', 'Chelan_Flow_lag_73', 'Chelan_Flow_lag_74',\n",
       "       'Chelan_Flow_lag_75', 'Chelan_Flow_lag_76', 'Chelan_Flow_lag_77',\n",
       "       'Entiat_Flow_lag_15', 'Entiat_Flow_lag_16', 'Entiat_Flow_lag_17',\n",
       "       'Entiat_Flow_lag_18', 'Entiat_Flow_lag_19', 'Entiat_Flow_lag_20',\n",
       "       'Entiat_Flow_lag_21', 'Entiat_Flow_lag_22', 'Entiat_Flow_lag_23',\n",
       "       'Entiat_Flow_lag_24', 'Entiat_Flow_lag_25', 'Entiat_Flow_lag_26',\n",
       "       'Entiat_Flow_lag_27', 'Entiat_Flow_lag_28', 'Entiat_Flow_lag_29',\n",
       "       'Entiat_Flow_lag_30'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rr_lagged = df.copy()\n",
    "\n",
    "# Rocky Reach Headwater Elevation lag for the last 2 minutes\n",
    "for lag in range(1, 3):\n",
    "    df_rr_lagged[f'Rocky_Reach_Headwater_Elevation_lag_{lag}'] = df['Rocky_Reach_Headwater_Elevation'].shift(lag)\n",
    "\n",
    "# Rocky Reach Discharge lag for the last 2 minutes\n",
    "for lag in range(1, 3):\n",
    "    df_rr_lagged[f'Rocky_Reach_Total_Discharge_lag_{lag}'] = df['Rocky_Reach_Total_Discharge'].shift(lag)\n",
    "\n",
    "# Wells Flow Impact = flows averaged from previous 90-105 minutes\n",
    "for lag in range(90, 106):\n",
    "    df_rr_lagged[f'Wells_Total_Discharge_lag_{lag}'] = df['Wells_Total_Discharge'].shift(lag)\n",
    "\n",
    "# Chelan Flow Impact = flows averaged from previous 62-77 minutes\n",
    "for lag in range(62, 78):\n",
    "    df_rr_lagged[f'Chelan_Flow_lag_{lag}'] = df['Chelan_Flow'].shift(lag)\n",
    "\n",
    "# Entiat Flow Impact = flows averaged from previous 15-30 minutes\n",
    "for lag in range(15, 31):\n",
    "    df_rr_lagged[f'Entiat_Flow_lag_{lag}'] = df['Entiat_Flow'].shift(lag)\n",
    "\n",
    "df_rr_lagged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7c61ca23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2629335, 54)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of unnecessary columns to drop\n",
    "columns_to_drop = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge','Chelan_Flow', 'Entiat_Flow', \n",
    "                   'Wenatchee_Flow', 'Rock_Island_Total_Discharge', 'Rock_Island_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns\n",
    "df_rr = df_rr_lagged.drop(columns=columns_to_drop).copy()\n",
    "\n",
    "# Drop rows with missing values\n",
    "df_rr.dropna(inplace=True)\n",
    "\n",
    "df_rr.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4e7374",
   "metadata": {},
   "source": [
    "### PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6b69dd66",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rocky_Reach_Headwater_Elevation'\n",
    "X = df_rr.drop(columns=[target]) \n",
    "y = df_rr[target]  # Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee28b48a",
   "metadata": {},
   "source": [
    "**Run the following code to check how the R^2 changes with number of components.**\n",
    "\n",
    "**The optimal components by running this is 16**"
   ]
  },
  {
   "cell_type": "raw",
   "id": "fa5ec113",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(5, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "\n",
    "# Find the number of components with the best average CV score\n",
    "optimal_components = component_range[np.argmax(cv_scores)]\n",
    "\n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "optimal_components"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8307ab5",
   "metadata": {},
   "source": [
    "#### Optimal Components - 16 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "de72fee6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error for Rocky Reach Dam: 0.0025159530261372686\n",
      "R-Squared for Rocky Reach Dam: 0.9942786545677642\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=16)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error for Rocky Reach Dam:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rocky Reach Dam:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "78e53899",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA with 16 Components:\n",
      "Wells_Total_Discharge_lag_101    10\n",
      "Wells_Total_Discharge_lag_98     10\n",
      "Wells_Total_Discharge_lag_97      9\n",
      "Wells_Total_Discharge_lag_105     9\n",
      "Wells_Total_Discharge_lag_90      9\n",
      "Wells_Total_Discharge_lag_102     9\n",
      "Wells_Total_Discharge_lag_93      9\n",
      "Wells_Total_Discharge_lag_96      9\n",
      "Wells_Total_Discharge_lag_94      8\n",
      "Wells_Total_Discharge_lag_100     8\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA with 16 Components:\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b40baf20",
   "metadata": {},
   "source": [
    "## 2. Rock Island"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b05e9108",
   "metadata": {},
   "source": [
    "### Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e4d11b11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge',\n",
       "       'Chelan_Flow', 'Entiat_Flow', 'Rocky_Reach_Total_Discharge',\n",
       "       'Wenatchee_Flow', 'Rock_Island_Total_Discharge',\n",
       "       'Rock_Island_Headwater_Elevation', 'Rocky_Reach_Headwater_Elevation',\n",
       "       'Rock_Island_Headwater_Elevation_lag_1',\n",
       "       'Rock_Island_Headwater_Elevation_lag_2',\n",
       "       'Rock_Island_Total_Discharge_lag_1',\n",
       "       'Rock_Island_Total_Discharge_lag_2', 'Wenatchee_Flow_lag_15',\n",
       "       'Wenatchee_Flow_lag_16', 'Wenatchee_Flow_lag_17',\n",
       "       'Wenatchee_Flow_lag_18', 'Wenatchee_Flow_lag_19',\n",
       "       'Wenatchee_Flow_lag_20', 'Wenatchee_Flow_lag_21',\n",
       "       'Wenatchee_Flow_lag_22', 'Wenatchee_Flow_lag_23',\n",
       "       'Wenatchee_Flow_lag_24', 'Wenatchee_Flow_lag_25',\n",
       "       'Wenatchee_Flow_lag_26', 'Wenatchee_Flow_lag_27',\n",
       "       'Wenatchee_Flow_lag_28', 'Wenatchee_Flow_lag_29',\n",
       "       'Wenatchee_Flow_lag_30', 'Rocky_Reach_Total_Discharge_lag_60',\n",
       "       'Rocky_Reach_Total_Discharge_lag_61',\n",
       "       'Rocky_Reach_Total_Discharge_lag_62',\n",
       "       'Rocky_Reach_Total_Discharge_lag_63',\n",
       "       'Rocky_Reach_Total_Discharge_lag_64',\n",
       "       'Rocky_Reach_Total_Discharge_lag_65',\n",
       "       'Rocky_Reach_Total_Discharge_lag_66',\n",
       "       'Rocky_Reach_Total_Discharge_lag_67',\n",
       "       'Rocky_Reach_Total_Discharge_lag_68',\n",
       "       'Rocky_Reach_Total_Discharge_lag_69',\n",
       "       'Rocky_Reach_Total_Discharge_lag_70',\n",
       "       'Rocky_Reach_Total_Discharge_lag_71',\n",
       "       'Rocky_Reach_Total_Discharge_lag_72',\n",
       "       'Rocky_Reach_Total_Discharge_lag_73',\n",
       "       'Rocky_Reach_Total_Discharge_lag_74',\n",
       "       'Rocky_Reach_Total_Discharge_lag_75',\n",
       "       'Rocky_Reach_Total_Discharge_lag_76',\n",
       "       'Rocky_Reach_Total_Discharge_lag_77',\n",
       "       'Rocky_Reach_Total_Discharge_lag_78',\n",
       "       'Rocky_Reach_Total_Discharge_lag_79',\n",
       "       'Rocky_Reach_Total_Discharge_lag_80',\n",
       "       'Rocky_Reach_Total_Discharge_lag_81',\n",
       "       'Rocky_Reach_Total_Discharge_lag_82',\n",
       "       'Rocky_Reach_Total_Discharge_lag_83',\n",
       "       'Rocky_Reach_Total_Discharge_lag_84',\n",
       "       'Rocky_Reach_Total_Discharge_lag_85',\n",
       "       'Rocky_Reach_Total_Discharge_lag_86',\n",
       "       'Rocky_Reach_Total_Discharge_lag_87',\n",
       "       'Rocky_Reach_Total_Discharge_lag_88',\n",
       "       'Rocky_Reach_Total_Discharge_lag_89',\n",
       "       'Rocky_Reach_Total_Discharge_lag_90'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ri_lagged = df.copy()\n",
    "\n",
    "# Rock Island Headwater Elevation lag for last 2 minutes\n",
    "for lag in range(1, 3):\n",
    "    df_ri_lagged[f'Rock_Island_Headwater_Elevation_lag_{lag}'] = df['Rock_Island_Headwater_Elevation'].shift(lag)\n",
    "\n",
    "# Rocky Island Discharge lag for last 2 minutes\n",
    "for lag in range(1, 3):\n",
    "    df_ri_lagged[f'Rock_Island_Total_Discharge_lag_{lag}'] = df['Rock_Island_Total_Discharge'].shift(lag)\n",
    "\n",
    "# Wells Flow Impact = flows from last 15-30 minutes.\n",
    "for lag in range(15, 31):\n",
    "    df_ri_lagged[f'Wenatchee_Flow_lag_{lag}'] = df['Wenatchee_Flow'].shift(lag)\n",
    "\n",
    "# Rocky Reach Discharge Impact = Discharge lags from last 60 to 90 minutes\n",
    "for lag in range(60, 91):\n",
    "    df_ri_lagged[f'Rocky_Reach_Total_Discharge_lag_{lag}'] = df['Rocky_Reach_Total_Discharge'].shift(lag)\n",
    "\n",
    "df_ri_lagged.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fac80b8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2629350, 53)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# List of columns to drop\n",
    "columns_to_drop = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge',\n",
    "                   'Chelan_Flow', 'Entiat_Flow', 'Rocky_Reach_Total_Discharge',\n",
    "                   'Wenatchee_Flow', 'Rocky_Reach_Headwater_Elevation']\n",
    "\n",
    "# Create the DataFrame df_ri by dropping the specified columns\n",
    "df_ri = df_ri_lagged.drop(columns=columns_to_drop).copy()\n",
    "\n",
    "# Drop rows with missing values\n",
    "df_ri.dropna(inplace=True)\n",
    "df_ri.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d95ebe13",
   "metadata": {},
   "source": [
    "### PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "43a05edd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rock_Island_Headwater_Elevation'\n",
    "X = df_ri.drop(columns=[target]) \n",
    "y = df_ri[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35724e9c",
   "metadata": {},
   "source": [
    "**Run the following code to check how the R^2 changes with number of components.**\n",
    "\n",
    "**The optimal components by running this is 22**"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5fc9c1af",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(5, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "\n",
    "# Find the number of components with the best average CV score\n",
    "optimal_components = component_range[np.argmax(cv_scores)]\n",
    "\n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "optimal_components"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd797ed3",
   "metadata": {},
   "source": [
    "#### Optimal Components - 22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "683e6f26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error for Rock Island Dam: 0.0006760730362111756\n",
      "R-Squared for Rock Island Dam: 0.9969058204878458\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=22)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error for Rock Island Dam:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock Island Dam:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a17e8be1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 22 Components\n",
      "Rocky_Reach_Total_Discharge_lag_90    11\n",
      "Rocky_Reach_Total_Discharge_lag_60    10\n",
      "Rocky_Reach_Total_Discharge_lag_74     9\n",
      "Rocky_Reach_Total_Discharge_lag_75     9\n",
      "Rocky_Reach_Total_Discharge_lag_85     8\n",
      "Rocky_Reach_Total_Discharge_lag_76     8\n",
      "Rocky_Reach_Total_Discharge_lag_71     8\n",
      "Rocky_Reach_Total_Discharge_lag_65     8\n",
      "Rocky_Reach_Total_Discharge_lag_67     8\n",
      "Rocky_Reach_Total_Discharge_lag_86     7\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 22 Components\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61382536",
   "metadata": {},
   "source": [
    "# 2. Seasonality Using PCA"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceff308d",
   "metadata": {},
   "source": [
    "## 1. Rocky Reach"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26fb20f7",
   "metadata": {},
   "source": [
    "### Spring - (3,4,5 months)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b626d187",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(662400, 54)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_rr_lagged.dropna(inplace = True)\n",
    "\n",
    "# Filter for spring months\n",
    "df_rr_spring = df_rr_lagged[df_rr_lagged['datetime_utc'].dt.month.isin([3, 4, 5])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_spring = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge', 'Chelan_Flow', 'Entiat_Flow', \n",
    "                          'Wenatchee_Flow', 'Rock_Island_Total_Discharge', 'Rock_Island_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_rr_spring = df_rr_spring.drop(columns=columns_to_drop_spring)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_rr_spring.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "eb5ca670",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rocky_Reach_Headwater_Elevation'\n",
    "X = df_rr_spring.drop(columns=[target]) \n",
    "y = df_rr_spring[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c68602ef",
   "metadata": {},
   "source": [
    "**Run the following code to check how the R^2 changes with number of components.**\n",
    "\n",
    "**The optimal components by running this is 17**"
   ]
  },
  {
   "cell_type": "raw",
   "id": "12c2bbec",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(10, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "\n",
    "\n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3607ce04",
   "metadata": {},
   "source": [
    "#### Optimal Components - 17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b6aa6950",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error for Rock Island Dam: 0.0023633777134123937\n",
      "R-Squared for Rock Island Dam: 0.9950807928984331\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=17)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error for Rock Island Dam:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock Island Dam:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ad93a1f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 17 Components from Rocky Reach Spring Data.\n",
      "Wells_Total_Discharge_lag_101    12\n",
      "Wells_Total_Discharge_lag_97     11\n",
      "Wells_Total_Discharge_lag_98     11\n",
      "Wells_Total_Discharge_lag_95     11\n",
      "Wells_Total_Discharge_lag_100    10\n",
      "Wells_Total_Discharge_lag_94     10\n",
      "Wells_Total_Discharge_lag_90      9\n",
      "Wells_Total_Discharge_lag_91      8\n",
      "Wells_Total_Discharge_lag_105     8\n",
      "Wells_Total_Discharge_lag_93      8\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 17 Components from Rocky Reach Spring Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a292950a",
   "metadata": {},
   "source": [
    "### Summer - 6,7,8 months"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "00dfe1aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(662400, 54)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_rr_lagged.dropna(inplace = True)\n",
    "\n",
    "df_rr_summer = df_rr_lagged[df_rr_lagged['datetime_utc'].dt.month.isin([6, 7, 8])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_summer = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge', 'Chelan_Flow', 'Entiat_Flow', 'Wenatchee_Flow', 'Rock_Island_Total_Discharge', 'Rock_Island_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_rr_summer = df_rr_summer.drop(columns=columns_to_drop_summer)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_rr_summer.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "607b8c50",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rocky_Reach_Headwater_Elevation'\n",
    "X = df_rr_summer.drop(columns=[target]) \n",
    "y = df_rr_summer[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96a14262",
   "metadata": {},
   "source": [
    "**Run the following code to check how the R^2 changes with number of components.**\n",
    "\n",
    "**The optimal components by running this is 17**"
   ]
  },
  {
   "cell_type": "raw",
   "id": "0c796ac3",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(10, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "\n",
    "\n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc61d441",
   "metadata": {},
   "source": [
    "#### Optimal Components - 17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9b0d7040",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 0.0014911463393961295\n",
      "R-Squared for Rock: 0.996542216990568\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=17)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "785e945b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 17 Components from Rocky Reach Summer Data.\n",
      "Wells_Total_Discharge_lag_98     12\n",
      "Wells_Total_Discharge_lag_97     11\n",
      "Wells_Total_Discharge_lag_95     11\n",
      "Wells_Total_Discharge_lag_101    11\n",
      "Wells_Total_Discharge_lag_94     11\n",
      "Wells_Total_Discharge_lag_104     9\n",
      "Wells_Total_Discharge_lag_100     9\n",
      "Wells_Total_Discharge_lag_93      9\n",
      "Wells_Total_Discharge_lag_90      8\n",
      "Wells_Total_Discharge_lag_105     8\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 17 Components from Rocky Reach Summer Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c75a413",
   "metadata": {},
   "source": [
    "### Autumn - 9,10,11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1a0a7b9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(655200, 54)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_rr_lagged.dropna(inplace = True)\n",
    "\n",
    "df_rr_autumn = df_rr_lagged[df_rr_lagged['datetime_utc'].dt.month.isin([9, 10, 11])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_autumn = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge', 'Chelan_Flow', 'Entiat_Flow', 'Wenatchee_Flow', 'Rock_Island_Total_Discharge', 'Rock_Island_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_rr_autumn = df_rr_autumn.drop(columns=columns_to_drop_autumn)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_rr_autumn.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "bb447e20",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rocky_Reach_Headwater_Elevation'\n",
    "X = df_rr_autumn.drop(columns=[target]) \n",
    "y = df_rr_autumn[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9fc75ec",
   "metadata": {},
   "source": [
    "**Run the following code to check how the R^2 changes with number of components.**\n",
    "\n",
    "**The optimal components by running this is 14**"
   ]
  },
  {
   "cell_type": "raw",
   "id": "b9e91c55",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(10, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "\n",
    "\n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99d99bee",
   "metadata": {},
   "source": [
    "#### Optimal Components - 14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5f29bc9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 0.0017459070864256812\n",
      "R-Squared for Rock: 0.9954831422231587\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=14)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "99cae08d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 17 Components from Rocky Reach Autumn Data.\n",
      "Wells_Total_Discharge_lag_105    10\n",
      "Wells_Total_Discharge_lag_98      9\n",
      "Wells_Total_Discharge_lag_100     9\n",
      "Wells_Total_Discharge_lag_90      9\n",
      "Wells_Total_Discharge_lag_97      8\n",
      "Wells_Total_Discharge_lag_96      8\n",
      "Wells_Total_Discharge_lag_99      8\n",
      "Wells_Total_Discharge_lag_95      8\n",
      "Wells_Total_Discharge_lag_101     8\n",
      "Wells_Total_Discharge_lag_93      8\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 17 Components from Rocky Reach Autumn Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac6cc8e2",
   "metadata": {},
   "source": [
    "### Winter - 12, 1, 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a00ddefe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(649335, 54)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_rr_lagged.dropna(inplace = True)\n",
    "\n",
    "df_rr_winter = df_rr_lagged[df_rr_lagged['datetime_utc'].dt.month.isin([12, 1, 2])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_winter = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge', 'Chelan_Flow', 'Entiat_Flow', 'Wenatchee_Flow', 'Rock_Island_Total_Discharge', 'Rock_Island_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_rr_winter = df_rr_winter.drop(columns=columns_to_drop_winter)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_rr_winter.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f133772f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rocky_Reach_Headwater_Elevation'\n",
    "X = df_rr_winter.drop(columns=[target]) \n",
    "y = df_rr_winter[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68052a1a",
   "metadata": {},
   "source": [
    "**Run the following code to check how the R^2 changes with number of components.**\n",
    "\n",
    "**The optimal components by running this is 14**"
   ]
  },
  {
   "cell_type": "raw",
   "id": "8ffe1b4e",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(10, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "\n",
    "\n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73f3fb25",
   "metadata": {},
   "source": [
    "#### Optimal Components - 14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f3814112",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 0.0038518410724965864\n",
      "R-Squared for Rock: 0.989230551042628\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=14)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ca354617",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 17 Components from Rocky Reach Winter Data.\n",
      "Wells_Total_Discharge_lag_90     10\n",
      "Wells_Total_Discharge_lag_98      9\n",
      "Wells_Total_Discharge_lag_95      9\n",
      "Wells_Total_Discharge_lag_100     9\n",
      "Wells_Total_Discharge_lag_101     9\n",
      "Wells_Total_Discharge_lag_105     9\n",
      "Wells_Total_Discharge_lag_97      8\n",
      "Wells_Total_Discharge_lag_93      8\n",
      "Wells_Total_Discharge_lag_96      7\n",
      "Wells_Total_Discharge_lag_94      7\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 17 Components from Rocky Reach Winter Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae6009cc",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "8f6b9369",
   "metadata": {},
   "source": [
    "## 2. Rock Island"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "593b51cb",
   "metadata": {},
   "source": [
    "### Spring - (3,4,5 months)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "709c58a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(662400, 53)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_ri_lagged.dropna(inplace = True)\n",
    "\n",
    "# Filter for spring months\n",
    "df_ri_spring = df_ri_lagged[df_ri_lagged['datetime_utc'].dt.month.isin([3, 4, 5])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_spring = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge','Chelan_Flow', 'Entiat_Flow', \n",
    "                          'Rocky_Reach_Total_Discharge','Wenatchee_Flow', 'Rocky_Reach_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_ri_spring = df_ri_spring.drop(columns=columns_to_drop_spring)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_ri_spring.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fab5e45b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rock_Island_Headwater_Elevation'\n",
    "X = df_ri_spring.drop(columns=[target]) \n",
    "y = df_ri_spring[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f3484ac",
   "metadata": {},
   "source": [
    " Run the following code to check how the R^2 changes with number of components.\n",
    "\n",
    "The optimal components by running this is 21"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d3613a9f",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(10, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "    \n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14a1c355",
   "metadata": {},
   "source": [
    "#### Optimal Components - 21\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "213760b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error for Rock Island Dam: 0.0016830182074658168\n",
      "R-Squared for Rock Island Dam: 0.9928433007180619\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=21)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error for Rock Island Dam:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock Island Dam:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "19096e88",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 21 Components from Rock Island Spring Data.\n",
      "Rocky_Reach_Total_Discharge_lag_60    11\n",
      "Rocky_Reach_Total_Discharge_lag_90    11\n",
      "Rocky_Reach_Total_Discharge_lag_75    10\n",
      "Rocky_Reach_Total_Discharge_lag_71     8\n",
      "Rocky_Reach_Total_Discharge_lag_79     7\n",
      "Rocky_Reach_Total_Discharge_lag_84     7\n",
      "Rocky_Reach_Total_Discharge_lag_68     7\n",
      "Rocky_Reach_Total_Discharge_lag_66     7\n",
      "Rocky_Reach_Total_Discharge_lag_86     7\n",
      "Rock_Island_Total_Discharge_lag_2      6\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 21 Components from Rock Island Spring Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6831059",
   "metadata": {},
   "source": [
    "## Summer (6, 7, 8) months"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "07c359a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(662400, 53)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_ri_lagged.dropna(inplace = True)\n",
    "\n",
    "# Filter for spring months\n",
    "df_ri_summer = df_ri_lagged[df_ri_lagged['datetime_utc'].dt.month.isin([6, 7, 8])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_summer = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge','Chelan_Flow', 'Entiat_Flow', \n",
    "                          'Rocky_Reach_Total_Discharge','Wenatchee_Flow', 'Rocky_Reach_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_ri_summer = df_ri_summer.drop(columns=columns_to_drop_summer)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_ri_summer.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2eb44855",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rock_Island_Headwater_Elevation'\n",
    "X = df_ri_summer.drop(columns=[target]) \n",
    "y = df_ri_summer[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6aa91ad",
   "metadata": {},
   "source": [
    "Run the following code to check how the R^2 changes with number of components.\n",
    "\n",
    "The optimal components by running this is 21"
   ]
  },
  {
   "cell_type": "raw",
   "id": "c72355ee",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(10, 25)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "    \n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4e5b7ae",
   "metadata": {},
   "source": [
    "### Optimal Components - 21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "478971f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error for Rock Island Dam: 0.0004244119797941725\n",
      "R-Squared for Rock Island Dam: 0.998551024945339\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=21)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error for Rock Island Dam:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock Island Dam:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0659dbc7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 21 Components from Rock Island Summer Data.\n",
      "Rocky_Reach_Total_Discharge_lag_90    11\n",
      "Rocky_Reach_Total_Discharge_lag_60    10\n",
      "Rocky_Reach_Total_Discharge_lag_65     8\n",
      "Rocky_Reach_Total_Discharge_lag_64     7\n",
      "Rocky_Reach_Total_Discharge_lag_67     7\n",
      "Rocky_Reach_Total_Discharge_lag_75     7\n",
      "Rocky_Reach_Total_Discharge_lag_79     7\n",
      "Rocky_Reach_Total_Discharge_lag_85     7\n",
      "Rocky_Reach_Total_Discharge_lag_71     7\n",
      "Rocky_Reach_Total_Discharge_lag_81     6\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 21 Components from Rock Island Summer Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38b5bf2f",
   "metadata": {},
   "source": [
    "## Autumn (9, 10, 11) months"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "49670ddc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(655200, 53)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_ri_lagged.dropna(inplace = True)\n",
    "\n",
    "# Filter for spring months\n",
    "df_ri_autumn = df_ri_lagged[df_ri_lagged['datetime_utc'].dt.month.isin([9, 10, 11])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_autumn = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge','Chelan_Flow', 'Entiat_Flow', \n",
    "                          'Rocky_Reach_Total_Discharge','Wenatchee_Flow', 'Rocky_Reach_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_ri_autumn = df_ri_autumn.drop(columns=columns_to_drop_autumn)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_ri_autumn.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1cbb8a88",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rock_Island_Headwater_Elevation'\n",
    "X = df_ri_autumn.drop(columns=[target]) \n",
    "y = df_ri_autumn[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9a20be9",
   "metadata": {},
   "source": [
    "Run the following code to check how the R^2 changes with number of components.\n",
    "\n",
    "The optimal components by running this is 25"
   ]
  },
  {
   "cell_type": "raw",
   "id": "27a437ba",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(20, 30)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "    \n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5da7dcf",
   "metadata": {},
   "source": [
    "### Optimal Components - 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "ff51b28c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error for Rock Island Dam: 0.0008812591598818558\n",
      "R-Squared for Rock Island Dam: 0.9945546170925796\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=25)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error for Rock Island Dam:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock Island Dam:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "f4fc123d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 21 Components from Rock Island Autumn Data.\n",
      "Rocky_Reach_Total_Discharge_lag_75    11\n",
      "Rocky_Reach_Total_Discharge_lag_60    11\n",
      "Rocky_Reach_Total_Discharge_lag_90    10\n",
      "Rocky_Reach_Total_Discharge_lag_71    10\n",
      "Rocky_Reach_Total_Discharge_lag_70     9\n",
      "Rocky_Reach_Total_Discharge_lag_67     9\n",
      "Rocky_Reach_Total_Discharge_lag_84     8\n",
      "Rocky_Reach_Total_Discharge_lag_79     8\n",
      "Rocky_Reach_Total_Discharge_lag_87     8\n",
      "Rocky_Reach_Total_Discharge_lag_74     7\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 21 Components from Rock Island Autumn Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a5c1263",
   "metadata": {},
   "source": [
    "## Winter (12, 1, 2) months"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "799f98f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(649350, 53)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the NA values\n",
    "df_ri_lagged.dropna(inplace = True)\n",
    "\n",
    "# Filter for spring months\n",
    "df_ri_winter = df_ri_lagged[df_ri_lagged['datetime_utc'].dt.month.isin([12, 1, 2])]\n",
    "\n",
    "# List of unnecessary columns to drop (as before)\n",
    "columns_to_drop_winter = ['datetime_utc', 'datetime_stamp', 'Wells_Total_Discharge','Chelan_Flow', 'Entiat_Flow', \n",
    "                          'Rocky_Reach_Total_Discharge','Wenatchee_Flow', 'Rocky_Reach_Headwater_Elevation']\n",
    "\n",
    "# Drop the unnecessary columns from df_rr_spring\n",
    "df_ri_winter = df_ri_winter.drop(columns=columns_to_drop_winter)\n",
    "\n",
    "# Display the shape of the df_rr_spring DataFrame to confirm the changes\n",
    "df_ri_winter.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "1690b823",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate features and target\n",
    "target = 'Rock_Island_Headwater_Elevation'\n",
    "X = df_ri_winter.drop(columns=[target]) \n",
    "y = df_ri_winter[target] #Target"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b881ef8",
   "metadata": {},
   "source": [
    "Run the following code to check how the R^2 changes with number of components.\n",
    "\n",
    "The optimal components by running this is 22"
   ]
  },
  {
   "cell_type": "raw",
   "id": "e52fa011",
   "metadata": {},
   "source": [
    "# Define a range of components to test\n",
    "component_range = range(20, 30)\n",
    "\n",
    "# Store the average cross-validation score for each number of components\n",
    "cv_scores = []\n",
    "\n",
    "# Set up cross-validation scheme\n",
    "cv = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# Perform grid search\n",
    "for n_components in component_range:\n",
    "    # Set up PCA with the current number of components\n",
    "    pca = PCA(n_components=n_components)\n",
    "    \n",
    "    # Transform X accordingly\n",
    "    X_pca = pca.fit_transform(X)\n",
    "    \n",
    "    # Set up the regression model\n",
    "    model = LinearRegression()\n",
    "    \n",
    "    # Perform cross-validation and store the average score\n",
    "    scores = cross_val_score(model, X_pca, y, cv=cv, scoring='r2')\n",
    "    cv_scores.append(np.mean(scores))\n",
    "    \n",
    "# Plot the scores\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(component_range, cv_scores, marker='o', linestyle='--')\n",
    "plt.xlabel('Number of PCA Components')\n",
    "plt.ylabel('Average R2 Score')\n",
    "plt.title('PCA Components vs R2 Score')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aee0ffc0",
   "metadata": {},
   "source": [
    "## Optimal Components - 22"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "8070d9a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error for Rock Island Dam: 0.0007003657093615828\n",
      "R-Squared for Rock Island Dam: 0.994779740643838\n"
     ]
    }
   ],
   "source": [
    "pca = PCA(n_components=25)\n",
    "X_pca = pca.fit_transform(X)\n",
    "\n",
    "# Splitting the data into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.3, shuffle=False)\n",
    "\n",
    "# Model training with Linear Regression\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predictions and evaluation\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Mean Squared Error for Rock Island Dam:\", mean_squared_error(y_test, y_pred))\n",
    "print(\"R-Squared for Rock Island Dam:\", r2_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "aed98aff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Most Influential Features in PCA of 21 Components from Rock Island winter Data.\n",
      "Rocky_Reach_Total_Discharge_lag_90    12\n",
      "Rocky_Reach_Total_Discharge_lag_60    11\n",
      "Rocky_Reach_Total_Discharge_lag_75    11\n",
      "Rocky_Reach_Total_Discharge_lag_71     9\n",
      "Rocky_Reach_Total_Discharge_lag_79     9\n",
      "Rocky_Reach_Total_Discharge_lag_74     8\n",
      "Rocky_Reach_Total_Discharge_lag_76     8\n",
      "Rocky_Reach_Total_Discharge_lag_84     8\n",
      "Rocky_Reach_Total_Discharge_lag_82     8\n",
      "Rocky_Reach_Total_Discharge_lag_68     8\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Features from the data\n",
    "feature_names = X.columns\n",
    "\n",
    "# Components given by pca\n",
    "components = pca.components_\n",
    "\n",
    "# Function to get top features for each component\n",
    "def get_top_features_for_component(component, num_features):\n",
    "    sorted_feature_indices = np.argsort(np.abs(component))[::-1][:num_features]\n",
    "    return feature_names[sorted_feature_indices]\n",
    "\n",
    "# Getting top 10 features for each component\n",
    "num_top_features = 10 \n",
    "top_features_per_component = {}\n",
    "\n",
    "for i, component in enumerate(components):\n",
    "    top_features = get_top_features_for_component(component, num_top_features)\n",
    "    top_features_per_component[f\"Component {i+1}\"] = top_features\n",
    "\n",
    "# Counting how often each feature appears in the top lists\n",
    "feature_counts = pd.Series(np.concatenate(list(top_features_per_component.values()))).value_counts()\n",
    "\n",
    "# Displaying the most frequently appearing features\n",
    "print(\"10 Most Influential Features in PCA of 21 Components from Rock Island winter Data.\")\n",
    "print(feature_counts.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "30a94e4d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
